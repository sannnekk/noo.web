import { deprecatedWarn } from '../utils/logger.service'
import type { Version } from '../utils/version.utils'
import { ApiErrorCodes } from './api-error-codes.data'

interface ApiServerError {
  id: string
  logId?: string
  statusCode: number
  message?: string
  payload?: any
}

interface ResponseMetadata {
  total?: number
}

class ApiResponse<T = unknown> {
  private data: T | null = null

  private metadata: ResponseMetadata | null = null

  private status: number

  private apiVersion: Version | null = null

  private supportedApiVersions: Version[] = []

  private deprecatedApiVersions: Version[] = []

  private error: {
    reason: 'network' | 'timeout' | 'server' | 'client' | 'unknown'
    logId?: string
    name: string
    description: string
    code: string
    payload?: any
  } | null = null

  constructor(
    data: T | null = null,
    status?: number,
    headers?: Record<string, any>
  ) {
    this.data = data ?? null
    this.status = status ?? 0

    this.setVersions(headers)
  }

  public getData() {
    return this.data
  }

  public getMetadata() {
    return this.metadata
  }

  public getStatus() {
    return this.status
  }

  public isDeprecated() {
    return this.deprecatedApiVersions.includes(this.apiVersion!)
  }

  public isError() {
    return this.error !== null
  }

  public setError(
    data: unknown,
    status: number,
    headers?: Record<string, any>
  ) {
    this.setVersions(headers)

    if (this.dataIsServerError(data)) {
      // error is generated by the server
      this.error = {
        reason: status >= 500 ? 'server' : 'client',
        name: ApiErrorCodes[data.id].name ?? ApiErrorCodes['fallback'].name,
        description:
          ApiErrorCodes[data.id].description ??
          ApiErrorCodes['fallback'].description,
        code: data.id,
        logId: data.logId,
        payload: data.payload
      }
    } else {
      this.error = {
        reason: 'unknown',
        name: ApiErrorCodes['UNKNOWN_ERROR'].name,
        description: ApiErrorCodes['UNKNOWN_ERROR'].description,
        code: 'UNKNOWN_ERROR'
      }
    }
  }

  public setNetworkError() {
    this.error = {
      reason: 'network',
      name: ApiErrorCodes['NETWORK_ERROR'].name,
      description: ApiErrorCodes['NETWORK_ERROR'].description,
      code: 'NETWORK_ERROR'
    }
  }

  public setUnknownError() {
    this.error = {
      reason: 'unknown',
      name: ApiErrorCodes['UNKNOWN_ERROR'].name,
      description: ApiErrorCodes['UNKNOWN_ERROR'].description,
      code: 'UNKNOWN_ERROR'
    }
  }

  private setVersions(headers?: Record<string, any>) {
    if (headers?.['api-version']) {
      this.apiVersion = headers['api-version'] as Version
    }

    if (headers?.['supported-api-versions']) {
      this.supportedApiVersions = headers['supported-api-versions']
        .split(',')
        .map((v: string) => v.trim() as Version)
    }

    if (headers?.['deprecated-api-versions']) {
      this.deprecatedApiVersions = headers['deprecated-api-versions']
        .split(',')
        .map((v: string) => v.trim() as Version)

      if (this.isDeprecated()) {
        deprecatedWarn(
          `Current API version is deprecated. Supported versions: ${this.supportedApiVersions.join(
            ', '
          )}`
        )
      }
    }
  }

  private dataIsServerError(data: unknown): data is ApiServerError {
    return typeof data === 'object' && data !== null && 'payload' in data
  }
}

export { ApiResponse }
